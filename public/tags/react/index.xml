<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>react on Notes and Wiki</title>
    <link>https://yfw.ink/tags/react/</link>
    <description>Recent content in react on Notes and Wiki</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 01 Jun 2022 00:09:00 +0800</lastBuildDate><atom:link href="https://yfw.ink/tags/react/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>React Fiber</title>
      <link>https://yfw.ink/posts/fiber/</link>
      <pubDate>Wed, 01 Jun 2022 00:09:00 +0800</pubDate>
      
      <guid>https://yfw.ink/posts/fiber/</guid>
      <description>fiber 基本工作原理 #  每一 react element 构造一个 fiber 节点，每个 fiber 节点是一个工作单元，一系列 fiber 节点构成一个 fiber 特殊的链表。该数据结构的优点是便于找到下次的工作单元
 针对每个 fiber 节点要做三件事：
 将元素添加到 dom 上 创建该元素 children 的 fiber 节点 选择下次的工作单元  工作单元执行顺序： 执行完所有的 children，如果没有 children，则执行其兄弟节点，如果没有 children 也没有兄弟节点执行其 uncle，没有 uncle 则到 root
fiberNode 的简单结构:
const newFiber = {  type: element.type, // 当前fiber的类型  props: element.props, // 当前fiber的props  parent: fiber, // 指向父级fiber节点  dom: null, // 该fiber节点对应的dom对象  alternate: null, // 指向上次commit的fiberNode  effectTag: &amp;#39;PLACEMENT&amp;#39;, // commit阶段用到  hooks: [], }; 每个 fiber 节点的工作完成之后，commit 整个 fiber tree 到 dom 上</description>
    </item>
    
  </channel>
</rss>
